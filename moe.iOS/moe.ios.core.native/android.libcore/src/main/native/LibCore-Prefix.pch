/*
 * Copyright (c) 2014-2016, Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "MOE-Common.h"
//#define USE_APPLE_CF
#ifdef MOE_WINDOWS
#define MOE_ONLOAD(name)                                                             \
  jint JNI_OnLoad_Local_##name(JavaVM*, void*);                                          \
  __declspec(dllexport) extern "C" JNICALL jint JNI_OnLoad_##name(JavaVM* vm, void* p) { \
    return JNI_OnLoad_Local_##name(vm, p);                                               \
  }                                                                                      \
  jint JNI_OnLoad_Local_##name(JavaVM* vm, void* p)
#else
#define MOE_ONLOAD(name)                                       \
  jint JNI_OnLoad_Local_##name(JavaVM*, void*);                    \
  extern "C" JNICALL jint JNI_OnLoad_##name(JavaVM* vm, void* p) { \
    return JNI_OnLoad_Local_##name(vm, p);                         \
  }                                                                \
  jint JNI_OnLoad_Local_##name(JavaVM* vm, void* p)
#endif

#ifndef MOE_WINDOWS
#define off64_t off_t
#endif

#ifdef MOE
#define IterationHandle _libcore_IterationHandle // Avoid name collision with libziparchive
#endif

#ifndef MOE_WINDOWS
#define _ALLBSD_SOURCE
#endif

#ifdef MOE_WINDOWS
#undef MACOSX
#endif

#ifdef TEMP_FAILURE_RETRY
#undef TEMP_FAILURE_RETRY
#endif

#define TEMP_FAILURE_RETRY(exp) ({         \
__typeof__ (exp) _rc;                      \
do {                                   \
_rc = (exp);                       \
} while (_rc == -1 && errno == EINTR); \
_rc; })

// MOE TODO: UChar is always a two-byte value, but we should revisit this in the near future.
#define CAST_TO_UCHAR(p) static_cast<UChar*>(static_cast<void*>(p))
#define CAST_TO_JCHAR(p) static_cast<jchar*>(static_cast<void*>(p))
#define CAST_TO_CONST_UCHAR(p) static_cast<const UChar*>(static_cast<const void*>(p))
#define CAST_TO_CONST_JCHAR(p) static_cast<const jchar*>(static_cast<const void*>(p))
