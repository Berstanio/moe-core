/* GENETATED SOURCE CODE, DO NOT EDIT! */

/*
 * Copyright (c) 2014-2016, Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <iostream>

#include "quick/inline_method_analyser.h"

// This was automatically generated by /Volumes/SSD/Android/inde-windows/art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const InlineMethodOpcode& rhs) {
  switch (rhs) {
    case kIntrinsicDoubleCvt: os << "IntrinsicDoubleCvt"; break;
    case kIntrinsicFloatCvt: os << "IntrinsicFloatCvt"; break;
    case kIntrinsicFloat2Int: os << "IntrinsicFloat2Int"; break;
    case kIntrinsicDouble2Long: os << "IntrinsicDouble2Long"; break;
    case kIntrinsicFloatIsInfinite: os << "IntrinsicFloatIsInfinite"; break;
    case kIntrinsicDoubleIsInfinite: os << "IntrinsicDoubleIsInfinite"; break;
    case kIntrinsicFloatIsNaN: os << "IntrinsicFloatIsNaN"; break;
    case kIntrinsicDoubleIsNaN: os << "IntrinsicDoubleIsNaN"; break;
    case kIntrinsicReverseBits: os << "IntrinsicReverseBits"; break;
    case kIntrinsicReverseBytes: os << "IntrinsicReverseBytes"; break;
    case kIntrinsicBitCount: os << "IntrinsicBitCount"; break;
    case kIntrinsicCompare: os << "IntrinsicCompare"; break;
    case kIntrinsicHighestOneBit: os << "IntrinsicHighestOneBit"; break;
    case kIntrinsicLowestOneBit: os << "IntrinsicLowestOneBit"; break;
    case kIntrinsicNumberOfLeadingZeros: os << "IntrinsicNumberOfLeadingZeros"; break;
    case kIntrinsicNumberOfTrailingZeros: os << "IntrinsicNumberOfTrailingZeros"; break;
    case kIntrinsicRotateRight: os << "IntrinsicRotateRight"; break;
    case kIntrinsicRotateLeft: os << "IntrinsicRotateLeft"; break;
    case kIntrinsicSignum: os << "IntrinsicSignum"; break;
    case kIntrinsicAbsInt: os << "IntrinsicAbsInt"; break;
    case kIntrinsicAbsLong: os << "IntrinsicAbsLong"; break;
    case kIntrinsicAbsFloat: os << "IntrinsicAbsFloat"; break;
    case kIntrinsicAbsDouble: os << "IntrinsicAbsDouble"; break;
    case kIntrinsicMinMaxInt: os << "IntrinsicMinMaxInt"; break;
    case kIntrinsicMinMaxLong: os << "IntrinsicMinMaxLong"; break;
    case kIntrinsicMinMaxFloat: os << "IntrinsicMinMaxFloat"; break;
    case kIntrinsicMinMaxDouble: os << "IntrinsicMinMaxDouble"; break;
    case kIntrinsicCos: os << "IntrinsicCos"; break;
    case kIntrinsicSin: os << "IntrinsicSin"; break;
    case kIntrinsicAcos: os << "IntrinsicAcos"; break;
    case kIntrinsicAsin: os << "IntrinsicAsin"; break;
    case kIntrinsicAtan: os << "IntrinsicAtan"; break;
    case kIntrinsicAtan2: os << "IntrinsicAtan2"; break;
    case kIntrinsicCbrt: os << "IntrinsicCbrt"; break;
    case kIntrinsicCosh: os << "IntrinsicCosh"; break;
    case kIntrinsicExp: os << "IntrinsicExp"; break;
    case kIntrinsicExpm1: os << "IntrinsicExpm1"; break;
    case kIntrinsicHypot: os << "IntrinsicHypot"; break;
    case kIntrinsicLog: os << "IntrinsicLog"; break;
    case kIntrinsicLog10: os << "IntrinsicLog10"; break;
    case kIntrinsicNextAfter: os << "IntrinsicNextAfter"; break;
    case kIntrinsicSinh: os << "IntrinsicSinh"; break;
    case kIntrinsicTan: os << "IntrinsicTan"; break;
    case kIntrinsicTanh: os << "IntrinsicTanh"; break;
    case kIntrinsicSqrt: os << "IntrinsicSqrt"; break;
    case kIntrinsicCeil: os << "IntrinsicCeil"; break;
    case kIntrinsicFloor: os << "IntrinsicFloor"; break;
    case kIntrinsicRint: os << "IntrinsicRint"; break;
    case kIntrinsicRoundFloat: os << "IntrinsicRoundFloat"; break;
    case kIntrinsicRoundDouble: os << "IntrinsicRoundDouble"; break;
    case kIntrinsicReferenceGetReferent: os << "IntrinsicReferenceGetReferent"; break;
    case kIntrinsicCharAt: os << "IntrinsicCharAt"; break;
    case kIntrinsicCompareTo: os << "IntrinsicCompareTo"; break;
    case kIntrinsicEquals: os << "IntrinsicEquals"; break;
    case kIntrinsicGetCharsNoCheck: os << "IntrinsicGetCharsNoCheck"; break;
    case kIntrinsicIsEmptyOrLength: os << "IntrinsicIsEmptyOrLength"; break;
    case kIntrinsicIndexOf: os << "IntrinsicIndexOf"; break;
    case kIntrinsicNewStringFromBytes: os << "IntrinsicNewStringFromBytes"; break;
    case kIntrinsicNewStringFromChars: os << "IntrinsicNewStringFromChars"; break;
    case kIntrinsicNewStringFromString: os << "IntrinsicNewStringFromString"; break;
    case kIntrinsicCurrentThread: os << "IntrinsicCurrentThread"; break;
    case kIntrinsicPeek: os << "IntrinsicPeek"; break;
    case kIntrinsicPoke: os << "IntrinsicPoke"; break;
    case kIntrinsicCas: os << "IntrinsicCas"; break;
    case kIntrinsicUnsafeGet: os << "IntrinsicUnsafeGet"; break;
    case kIntrinsicUnsafePut: os << "IntrinsicUnsafePut"; break;
    case kIntrinsicUnsafeGetAndAddInt: os << "IntrinsicUnsafeGetAndAddInt"; break;
    case kIntrinsicUnsafeGetAndAddLong: os << "IntrinsicUnsafeGetAndAddLong"; break;
    case kIntrinsicUnsafeGetAndSetInt: os << "IntrinsicUnsafeGetAndSetInt"; break;
    case kIntrinsicUnsafeGetAndSetLong: os << "IntrinsicUnsafeGetAndSetLong"; break;
    case kIntrinsicUnsafeGetAndSetObject: os << "IntrinsicUnsafeGetAndSetObject"; break;
    case kIntrinsicUnsafeLoadFence: os << "IntrinsicUnsafeLoadFence"; break;
    case kIntrinsicUnsafeStoreFence: os << "IntrinsicUnsafeStoreFence"; break;
    case kIntrinsicUnsafeFullFence: os << "IntrinsicUnsafeFullFence"; break;
    case kIntrinsicSystemArrayCopyCharArray: os << "IntrinsicSystemArrayCopyCharArray"; break;
    case kIntrinsicSystemArrayCopy: os << "IntrinsicSystemArrayCopy"; break;
    case kInlineOpNop: os << "InlineOpNop"; break;
    case kInlineOpReturnArg: os << "InlineOpReturnArg"; break;
    case kInlineOpNonWideConst: os << "InlineOpNonWideConst"; break;
    case kInlineOpIGet: os << "InlineOpIGet"; break;
    case kInlineOpIPut: os << "InlineOpIPut"; break;
    case kInlineOpConstructor: os << "InlineOpConstructor"; break;
    case kInlineStringInit: os << "InlineStringInit"; break;
    default: os << "InlineMethodOpcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/SSD/Android/inde-windows/art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const InlineMethodFlags& rhs) {
  switch (rhs) {
    case kNoInlineMethodFlags: os << "NoInlineMethodFlags"; break;
    case kInlineIntrinsic: os << "InlineIntrinsic"; break;
    case kInlineSpecial: os << "InlineSpecial"; break;
    default: os << "InlineMethodFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/SSD/Android/inde-windows/art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const IntrinsicFlags& rhs) {
  switch (rhs) {
    case kIntrinsicFlagNone: os << "IntrinsicFlagNone"; break;
    case kIntrinsicFlagMin: os << "IntrinsicFlagMin"; break;
    case kIntrinsicFlagIsVolatile: os << "IntrinsicFlagIsVolatile"; break;
    case kIntrinsicFlagIsObject: os << "IntrinsicFlagIsObject"; break;
    case kIntrinsicFlagIsOrdered: os << "IntrinsicFlagIsOrdered"; break;
    default: os << "IntrinsicFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

